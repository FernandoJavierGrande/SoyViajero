@inject NavigationManager navigationManager
@inject IHttpService http

<nav class="barra_navegacion">
    <div class="containter_btnInicio">
        <div class="btn_inicio">
            <a href="/">
                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="#FDC830" class="bi bi-house-fill" viewBox="0 0 16 16">
                <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L8 2.207l6.646 6.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5Z"/>
                <path d="m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6Z"/>
                </svg>
                <i class"bi bi-house-fill"></i>
            </a>
        </div>
     </div>
    <div class="buscador">
        <div class="cuadro_busqueda">
            <input type="text" />
            <button class="btn_buscador">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#FDC830" class="bi bi-search" viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
            </svg>
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
    <div class="perfil">
        <div class="btn_perfil">
            <a @onclick="()=>expandeSubMenu =! expandeSubMenu">
               <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#FDC830" class="bi bi-person-circle" viewBox="0 0 16 16">
                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
                </svg>
                <i class="bi bi-person-circle"></i>
            </a>
            @if (expandeSubMenu)
                    {
                    readPublicaciones();
                    readCuenta();
                    if (cuentaHostelLogueada == null && cuentaViajeroLogueada == null)
                        {
                        <div class="containter_cuentaNoLogueada_desplegable">
                            <a class="dropdown-item" href="Login" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick="()=>expandeSubMenu =! expandeSubMenu">
                            Iniciar sesión
                            </a>
                       </div>                              
                        }
                        else
                        {
                        <div class="containter_desplegable">
                            <a class="dropdown-item" href="Perfil" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick="()=>expandeSubMenu =! expandeSubMenu">
                            Mi Perfil
                            </a>
                            <a class=" dropdown-item" href="Cuentas" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick="()=>expandeSubMenu =! expandeSubMenu">
                            Cambiar de cuenta
                            </a>
                            <a class=" dropdown-item" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick="()=>expandeSubMenu =! expandeSubMenu">
                            Cerrar sesión 
                            </a>
                       </div>                    
                        }
                    }
        </div>
    </div>
</nav>
@code{
    private void nuevaPublicacion()
    {
        navigationManager.NavigateTo("/CrearPublicacion"); 
    }
    private bool expandeSubMenu;
    private CuentaHostel cuentaHostelLogueada; 
    private CuentaViajero cuentaViajeroLogueada; 
    private List<Publicacion> publicaciones = new List<Publicacion>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await readPublicaciones();
        await readCuenta();

    }
    private async Task readCuenta()
    {
        foreach (var item in publicaciones)
        {
            if (item.CuentasId.Contains("h"))
            {
                var respuesta = await http.Get<CuentaHostel>($"/BuscarHostel/{item.CuentasId}");
                if (!respuesta.Error)
                {
                    cuentaHostelLogueada = respuesta.Respuesta;
                }                
            } 
            else if (item.CuentasId.Contains("v"))
            {
                var respuesta = await http.Get<CuentaViajero>($"/BuscarViajero/{item.CuentasId}");
                if (!respuesta.Error)
                {
                    cuentaViajeroLogueada = respuesta.Respuesta;
                }                
            } 
        }  

    }    
    private async Task readPublicaciones()
    {
        var respuesta = await http.Get<List<Publicacion>>("/Publicaciones");
        if (!respuesta.Error)
        {
            publicaciones = respuesta.Respuesta;

        }
    }
}