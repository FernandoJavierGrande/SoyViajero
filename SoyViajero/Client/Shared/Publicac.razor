@inject IHttpService http


<div class="containerPublicacion">
    <div class="textos">
        @if(cuentaHostel != null)
        {
            <span class="nombreCuenta">@cuentaHostel.Nombre</span>
        }
        else if (cuentaViajero != null)
        {
            <span class="nombreCuenta">@cuentaViajero.Nombre</span>
        }
        <br />
        <span class="horaPublicacion"> @publicacion.FechaCreacion</span>
        <p class="parrafo"> @publicacion.Texto</p>
    </div>

    <div class="foto"></div>
    <div class="iconoComentarios">
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="#85929E" class="bi bi-chat-right" viewBox="0 0 16 16">
        <path d="M2 1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h9.586a2 2 0 0 1 1.414.586l2 2V2a1 1 0 0 0-1-1H2zm12-1a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z"/>
        </svg>
        <a href="Muro/Comentarios/@publicacion.ID" class="linkComent">Comentarios</a>
    </div>
</div>


@code {
    [Parameter] public Publicacion publicacion { get; set; }
    public CuentaHostel cuentaHostel;
    public CuentaViajero cuentaViajero;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }
    private async Task Leer()
    {
        var respuestaH = await http.Get<CuentaHostel>($"/BuscarHostel/{publicacion.CuentasId}");
        if(!respuestaH.Error)
        {
            cuentaHostel = respuestaH.Respuesta;
        }
        var respuestaV = await http.Get<CuentaViajero>($"/BuscarViajero/{publicacion.CuentasId}");
        if(!respuestaV.Error)
        {
            cuentaViajero = respuestaV.Respuesta;
        }
    }
}
