@inject NavigationManager navigationManager
@inject IHttpService http

<button @onclick="redirect" class="btn">
    <div class="inconoTexto">
        <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="#FDC830" class="bi bi-file-earmark-text" viewBox="0 0 16 16">
        <path d="M5.5 7a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zM5 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5z"/>
        <path d="M9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.5L9.5 0zm0 1v2A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5z"/>
        </svg>
        <i class="bi bi-file-earmark-text"></i>
        <div class="containerText">
            <span class="primerTexto">Nueva publicación</span>
            <span class="segundoTexto">Cuéntanos tu anécdota</span>
        </div>
    </div>
    <div>
        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="#FDC830" class="bi bi-plus" viewBox="0 0 16 16">
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
        </svg>
        <i class="bi bi-plus"></i>
    </div>
</button>

@code {
    private void redirect()
    {
        if (cuentaHostelLogueada == null && cuentaViajeroLogueada == null)
        {
            navigationManager.NavigateTo("/Login");
        }
        else
        {
           navigationManager.NavigateTo("/CrearPublicacion"); 
        }
        
    }
    private CuentaHostel cuentaHostelLogueada; 
    private CuentaViajero cuentaViajeroLogueada; 
    private List<Publicacion> publicaciones = new List<Publicacion>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await readPublicaciones();
        await readCuenta();

    }
    private async Task readCuenta()
    {
        foreach (var item in publicaciones)
        {
            if (item.CuentasId.Contains("h"))
            {
                var respuesta = await http.Get<CuentaHostel>($"/BuscarHostel/{item.CuentasId}");
                if (!respuesta.Error)
                {
                    cuentaHostelLogueada = respuesta.Respuesta;
                }                
            } 
            else if (item.CuentasId.Contains("v"))
            {
                var respuesta = await http.Get<CuentaViajero>($"/BuscarViajero/{item.CuentasId}");
                if (!respuesta.Error)
                {
                    cuentaViajeroLogueada = respuesta.Respuesta;
                }                
            } 
        }  

    }    
    private async Task readPublicaciones()
    {
        var respuesta = await http.Get<List<Publicacion>>("/Publicaciones");
        if (!respuesta.Error)
        {
            publicaciones = respuesta.Respuesta;

        }
    }
}
