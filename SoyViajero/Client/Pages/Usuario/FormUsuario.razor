<EditForm Model="usuario" OnValidSubmit="onValidSubmit" class="formLogin">

    <DataAnnotationsValidator/>
    <div class="container">
            <label>Nombre</label>
            <InputText class="inputLogin" @bind-Value="usuario.NombreUser" />
            <ValidationMessage For="@(() => usuario.NombreUser)"/>
    </div>
    <div class="container">
            <label>Mail</label>
            <InputText class="inputLogin" @bind-Value="@usuario.Mail"/>
            <ValidationMessage For="@(() => usuario.Mail)"/>
    </div>
    <div class="container">
            <label>Contraseña</label>
            <InputText class="inputLogin" @bind-Value="@usuario.Pass"/>
            <ValidationMessage For="@(() => usuario.Pass)"/>
    </div>


    <button class="btnRegistro" type="submit">Aceptar</button>
    <button class="btnCancelar" @onclick="onCancel">Cancelar</button>
</EditForm>


@*        <div class="containter">
            <label>Usuario</label>
            <InputText type="text" class="inputLogin" placeholder="Usuario" @bind-Value=@usuario.NombreUser/>
        </div>
        <div class="containter">
            <label>Contraseña</label>
            <InputText type="password" class="inputLogin" placeholder="Contraseña" @bind-Value=@usuario.Pass/>
        </div>
        <button class="btnIngresar" type="submit">Ingresar</button>
        <div class="containterRegistro">
            <label class="lblRegistro">¿No tenes cuenta? ¡Regístrate!</label>
            <button class="btnRegistro" @onclick="redirectRegistro">Crear cuenta</button>
        </div>  *@

@code {
    [Parameter] public Usuario usuario { get; set; }
    [Parameter] public EventCallback onValidSubmit { get; set; }
    [Parameter] public EventCallback onCancel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        usuario.Id = 0;
        usuario.cuentasHostel = null;
        usuario.cuentaViajero = null;
        usuario.fechaCreacion = DateTime.Today.Date;

    }
}

