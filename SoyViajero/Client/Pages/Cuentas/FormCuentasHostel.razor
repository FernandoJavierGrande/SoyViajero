<EditForm Model="cuentaHostel" OnValidSubmit="onValidSubmit" class="formCuenta">
    <DataAnnotationsValidator/>
    <div class="containerDatos">
        <div class="cardDatos">
            <div class="divInp">
                <InputText class="inputForm" placeholder="Nombre" @bind-Value="@cuentaHostel.Nombre"/>
                <ValidationMessage For="@(() => cuentaHostel.Nombre)"/>
            </div>
            <div class="divInp">
                <InputText class="inputForm" placeholder="Ciudad" @bind-Value="@cuentaHostel.Ciudad"/>
                <ValidationMessage For="@(() => cuentaHostel.Ciudad)"/>
            </div>
            <div class="divInp">
            <InputText class="inputForm" placeholder="Provincia" @bind-Value="@cuentaHostel.Provincia"/>
            <ValidationMessage For="@(() => cuentaHostel.Provincia)"/>
            </div>
            <div class="divInp">
                <InputText class="inputForm" placeholder="País" @bind-Value="@cuentaHostel.Pais"/>
                <ValidationMessage For="@(() => cuentaHostel.Pais)"/>
            </div>
        </div>

        <div class="cardDatos">
            <div class="divInp">
                <InputText class="inputForm" placeholder="Descripción" @bind-Value="@cuentaHostel.Descripcion"/>
                <ValidationMessage For="@(() => cuentaHostel.Descripcion)"/>
            </div>
            <div class="divInp">
                <InputText class="inputForm" placeholder="Foto" @bind-Value="@cuentaHostel.FotoPerfil"/>
                <ValidationMessage For="@(() => cuentaHostel.FotoPerfil)"/>
            </div>
            <div class="divInp">
                <InputNumber class="inputForm" placeholder="Teléfono de contacto" @bind-Value="@cuentaHostel.Telefono"/>  @*cambiar a texto en bbdd*@
                <ValidationMessage For="@(() => cuentaHostel.Telefono)"/>
            </div>
            <div class="divInp">
                <InputText class="inputForm" placeholder="Mail de contacto" @bind-Value="@cuentaHostel.Mail"/>
                <ValidationMessage For="@(() => cuentaHostel.Mail)"/>
            </div>
        </div>
    </div>
    <div class="containerBtns">
        <button class="btnSubmit" type="submit">@txt_btn_ok</button>
        <button class="btnCancelar" @onclick="onCancel">Cancelar</button>
    </div>

</EditForm>

@code {

    [Parameter] public CuentaHostel cuentaHostel { get; set; }
    [Parameter] public EventCallback onValidSubmit { get; set; }
    [Parameter] public EventCallback onCancel { get; set; } 
    [Parameter]public string txt_btn_ok { get; set; } = "Crear";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

    }
}
