@page "/Cuentas"
@inject IHttpService http
@inject NavigationManager navigationManager

<div class="content">
    <div class="botones">
        <a class= "btnCrearCuenta" href="Cuentas/CrearHostel">Crear nueva cuenta de hostel</a>
        <a class= "btnCrearCuenta" href="Cuentas/CrearViajero">Crear nueva cuenta de viajero</a>
    </div>
    <div class="containerCards">
            @if (cuentasH == null && cuentaV ==null)
            {
                <span>Cargando</span>
            }
            else if (cuentasH.Count == 0 && cuentaV == null)
            {
                <span>No hay datos disponibles</span>
            }
            else
            {
                @if (cuentaV!=null)
                {
                    <div class="cardCuenta">
                        <div class="fotoCard" style="background-image: url(@cuentaV.FotoPerfil);"></div>
                        <span>@cuentaV.Nombre @cuentaV.Apellido</span>
                        <div class="botonesCard">
                            <button class ="btnCard" @onclick="()=>logCuenta(cuentaV.Id)">Ingresar</button>
                            <button class="btnCard" @onclick="()=>redirectViajeroMod(cuentaV)">Modificar</button>
                            <button class="btnCardEliminar" @onclick="()=>Eliminar(cuentaV.Id)">Eliminar</button>
                        </div>
 
                    </div>
                }
                @foreach (var item in cuentasH)
                {
                    <div class="cardCuenta">
                        <div class="fotoCard" style="background-image: url(@item.FotoPerfil);"></div>
                        <span>@item.Nombre</span>
                        <div class="botonesCard">
                            <button class ="btnCard" @onclick="()=>logCuenta(item.Id)">Ingresar</button>
                            <button class="btnCard" @onclick="()=>redirectHostelMod(item)">Modificar</button>
                            <button class="btnCardEliminar" @onclick="()=>Eliminar(item.Id)">Eliminar</button>
                        </div>
                    </div>
                }
            }
    </div>
@*    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Nombre</th>
                <th scope="col">Tipo de cuenta</th> 
                <th scope="col"> </th>
                <th scope="col"> </th>
                <th scope="col"> </th>
                <th scope="col"> </th>
            </tr>
        </thead>
        <tbody>
            @if (cuentasH == null && cuentaV ==null)
            {
                <tr>Cargando</tr>
            }
            else if (cuentasH.Count == 0 && cuentaV == null)
            {
                <tr>No hay datos disponibles</tr>
            }
            else
            {
                @if (cuentaV!=null)
                {
                    <tr>
                        <td>@cuentaV.Nombre @cuentaV.Apellido</td>
                        <td>Viajero</td>
                        <td> <a class ="btn btn-dark" @onclick="()=>logCuenta(cuentaV.Id)" >Ingresar</a> </td>
                        <td> <a class="btn btn-warning" href="/CuentasViajero/Editar/@cuentaV.Id">Modificar</a> </td>
                        <td> <a class="btn btn-danger" @onclick="()=>Eliminar(cuentaV.Id)">Eliminar</a> </td>
                    </tr>
                }
                @foreach (var item in cuentasH)
                {
                    <tr>
                        <td>@item.Nombre</td>
                        <td>Hostel</td>
                        <td> <a class ="btn btn-dark" @onclick="()=>logCuenta(item.Id)" >Ingresar</a> </td>
                        <td> <a class="btn btn-warning" href="/CuentasHostel/Editar/@item.Id">Modificar</a> </td>
                        <td> <a class="btn btn-danger" @onclick="()=>Eliminar(item.Id)">Eliminar</a> </td>
                    </tr>
                }
            }
        </tbody>
        </table>*@
</div>
    <button class="btnEliminarUsr" @onclick="@EliminarUsuario">Eliminar mi usuario</button>

    <Confirmacion  @ref ="confirmacion"
                verOk = "true"
                verCancelar = "true"
                textOk = "Aceptar"
                onCancel = "Cerrar"
                onConfirm = "Delete"
                Titulo = "@mensajeTitulo">
                <div>
                    @mensajeConfirmacion
                </div>

    </Confirmacion>

    

@code {
    List<CuentaHostel> cuentasH = new List<CuentaHostel>();
    CuentaViajero  cuentaV = new CuentaViajero();
    Usuario usuario = new Usuario();
    Confirmacion confirmacion;
    private string mensajeConfirmacion, mensajeTitulo;
    private string CuentaElim;
    private bool banderaDelete;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await readCuentas();

    }
    private async Task readCuentas()
    {
        var respuesta = await http.Get<Usuario>("api/Cuentas");
        if (!respuesta.Error)
        {
            if (respuesta.Respuesta.cuentasHostel.Count>0)
            {
                cuentasH = respuesta.Respuesta.cuentasHostel;
            }
            cuentaV = respuesta.Respuesta.cuentaViajero; 

        }
    }
    private async Task logCuenta(string Id)
    {
        Console.WriteLine($"id = {Id}");
        var respuesta = await http.Get<int>($"api/Login/{Id}");
        if (!respuesta.Error)
        {
            //if (Id.Contains("h"))
            //{
            //    navigationManager.NavigateTo($"/PerfilHostel/{Id}");
            //}
            //else
            //{
            //    navigationManager.NavigateTo($"/PerfilViajero/{Id}");
            //}
            navigationManager.NavigateTo($"/Perfil/{Id}");

        }
        else
        {
            navigationManager.NavigateTo("/");
        }

    }
    private async Task Delete()
    {
        if (banderaDelete)
        {
            if (CuentaElim.Contains("v"))
            {
                var resp = await http.Delete($"/EliminarViajero");
                if(resp.Error)
                {
                    var body = "Error";
                }
                Cerrar();
            }
            else if(CuentaElim.Contains("h"))
            {
                var resp = await http.Delete($"/EliminarHostel/{CuentaElim}");
                if(resp.Error)
                {
                    var body = "Error";
                }
                Cerrar();
            }

        }
        else if(!banderaDelete)
        {
            var resp = await http.Delete("api/Login");
            if (resp.Error)
            {
                var body = "Error";
            }
            Cerrar();
            navigationManager.NavigateTo("/");
        }


    }
    private void Eliminar(string idCuenta)
    {
        CuentaElim = idCuenta;
        mensajeConfirmacion = $"¿Desea eliminar la cuenta {CuentaElim}?";
        mensajeTitulo = "¿Eliminar cuenta?";
        banderaDelete = true;
        confirmacion.Ver();
    }
    private void Cerrar()
    {
        confirmacion.Ocultar();
        CuentaElim = string.Empty;
    }
    private void EliminarUsuario()
    {
        mensajeConfirmacion = $"¿Desea eliminar su usuario? Esto eliminará el usuario y las cuentas asocuadas a él";
        mensajeTitulo = "¿Eliminar Usuario?";
        banderaDelete = false;
        confirmacion.Ver();
    }
    private void redirectHostelMod(CuentaHostel cuentaHActual)
    {
        navigationManager.NavigateTo($"/CuentasHostel/Editar/{cuentaHActual.Id}");
    }
    private void redirectViajeroMod(CuentaViajero cuentaVActual)
    {
        navigationManager.NavigateTo($"/CuentasViajero/Editar/{cuentaVActual.Id}");
    }
}

