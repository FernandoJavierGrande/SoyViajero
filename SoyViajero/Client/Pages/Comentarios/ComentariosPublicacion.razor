@page "/Muro/Comentarios/{publicacionId:int}"
@inject IHttpService http
@inject NavigationManager nav

<Publicac publicacion="@publicacion"></Publicac>


 @if (comentarios.Count<1)
 {
     <label> No hay comentarios</label>
 }
 else
 {
     @foreach (var item in comentarios)
     {
         <div class="form-control">
             @if (item.PublicacionId == publicacionId)
             {
                <label> El @item.FechaCreacion.ToShortDateString() @item.Nombre comentó: </label>
                <label>@item.texto </label>
             }
         </div>
     }
 }
        

<ComentarPublicacion @ref="NuevoComentario"
                verOk="true"
                verCancelar="true"
                textOk="Comentar"
                onCancel="close"
                onConfirm="EnviarComentario"
                Titulo="comentar">

                <input @bind=@texto/>

 </ComentarPublicacion>

 <button class="btn btn-secondary" @onclick=@verCom>comentar</button>


@code {
    [Parameter] public int publicacionId {get;set;}
    List<Comentario> comentarios = new List<Comentario>();
    private Publicacion publicacion = new Publicacion();
    private string texto = string.Empty;
    private string nombre = string.Empty;
    private bool logueado = false;
    ComentarPublicacion NuevoComentario;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
        await cuenta();
    }


    private async Task Leer()
    {
        var respuesta = await http.Get<List<Comentario>>($"/Comentarios/{publicacionId}");
        if(!respuesta.Error)
        {
            comentarios = respuesta.Respuesta;
        }

        var respuestaPublicacion = await http.Get<Publicacion>($"api/Publicacion/{publicacionId}");
        if(!respuesta.Error)
        {
            publicacion = respuestaPublicacion.Respuesta;
        }      
    }
    private void close()
    {
        NuevoComentario.Ocultar();
    }
    private void verCom()
    {
        if (logueado)
        {
            NuevoComentario.Ver();
        }
        else
        {
            nav.NavigateTo("/Login");
        }
    }

    private async Task EnviarComentario()
    {
        Comentario comentarioGuardar = new Comentario();

        comentarioGuardar.FechaCreacion = DateTime.Now;
        comentarioGuardar.PublicacionId = publicacionId;
        comentarioGuardar.texto = texto.Trim();
        comentarioGuardar.CuentasId = "-";

        var resp = await http.Post<Comentario>($"api/Comentario", comentarioGuardar);
        if (resp.Error)
        {
            var body = resp.HttpResponseMessage;
        }
        nav.NavigateTo($"/Muro/Comentarios/{publicacionId}",true);
        close();

    }
    private async Task cuenta()
    {
        var res = await http.Get<Usuario>("api/Login/Consulta");
        if (!res.Error && res.Respuesta.NombreUser != "null")
        {
            {
                logueado = true;
            }
        }
    }

}
