@page "/Muro/Comentarios/{publicacionId:int}"
@inject IHttpService http
<h3>Comentarios</h3>

<table>
    <tr>
        <td>Publicacion: "</td>
        <td>@publicacion.Texto "</td>
    </tr>
</table>
    <div class="form-control-sm">
        <img src="@publicacion.fotoPublicacion" width="300" height="200" alt="Imagen de la publicacion"/>
    </div>
    <div class="form-group">
        <td> del @publicacion.FechaCreacion.ToShortDateString()</td>
    </div>


 @if (comentarios.Count<1)
 {
     <label> No hay comentarios</label>
 }
 else
 {
     @foreach (var item in comentarios)
     {
         <div class="form-control">
             @if (item.PublicacionId == publicacionId)
        {
             <label> El @item.FechaCreacion.ToShortDateString() "@item.Nombre" comentó: </label>
             <label>@item.texto </label>
             
         }
         </div>
     }
 }


<ComentarPublicacion @ref="NuevoComentario"
                verOk="true"
                verCancelar="true"
                textOk="Comentar"
                onCancel="close"
                onConfirm="EnviarComentario"
                Titulo="comentar">

                <input @bind=@texto/>

 </ComentarPublicacion>

 <button class="btn btn-secondary" @onclick=@verCom>comentar</button>


@code {
    [Parameter] public int publicacionId {get;set;}
    List<Comentario> comentarios = new List<Comentario>();
    private Publicacion publicacion = new Publicacion();
    private string texto = string.Empty;
    private string nombre = string.Empty;
    ComentarPublicacion NuevoComentario;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Leer();
    }


    private async Task Leer()
    {
        var respuesta = await http.Get<List<Comentario>>($"/Comentarios/{publicacionId}");
        if(!respuesta.Error)
        {
            comentarios = respuesta.Respuesta;

        }

        var respuestaPublicacion = await http.Get<Publicacion>($"api/Publicacion/{publicacionId}");
        if(!respuesta.Error)
        {
            publicacion = respuestaPublicacion.Respuesta;  
        }        
    }
    private void close() => NuevoComentario.Ocultar();
    
    private void verCom() => NuevoComentario.Ver();

    private async Task EnviarComentario()
    {
        Comentario comentarioGuardar = new Comentario();

        comentarioGuardar.FechaCreacion = DateTime.Now;
        comentarioGuardar.PublicacionId = publicacionId;
        comentarioGuardar.texto = texto.Trim();
        comentarioGuardar.CuentasId = "-";

        var resp = await http.Post<Comentario>($"api/Comentario", comentarioGuardar);
        if (resp.Error)
        {
            var body = resp.HttpResponseMessage;
        }
        StateHasChanged();
        close();

    }
    private async Task TraerCuenta(string id)
    {
        Console.WriteLine("entro a traer cuenta");

        if (id.Contains("h"))
        {
            var resp = await http.Get<CuentaHostel>($"/BuscarHostel/{id}");
            if (resp.Error)
            {
                var body = resp.HttpResponseMessage;

            }
            else
            {
                nombre = resp.Respuesta.Nombre;
                StateHasChanged();
            }
        }
        else
        {
            var resp = await http.Get<CuentaViajero>($"/BuscarViajero/{id}");
            if (resp.Error)
            {
                var body = resp.HttpResponseMessage;
            }
            else
            {
                nombre = $"{resp.Respuesta.Nombre} {resp.Respuesta.Apellido}";
                StateHasChanged();
            }  
        }
    }

}
